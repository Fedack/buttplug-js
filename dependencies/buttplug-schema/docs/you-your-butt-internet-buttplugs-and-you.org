#+OPTIONS: toc:nil
* Summary
:PROPERTIES:
:EXPORT_FILE_NAME: SUMMARY.md
:END:

#+BEGIN_SRC emacs-lisp :exports results :results value raw replace
(org-build-gitbook-toc)
#+END_SRC
* Introduction
:PROPERTIES:
:EXPORT_FILE_NAME: README.md
:END:
** I Want To Be A Shirt
"I want to be a shirt."

"A what?"

"A shirt."

"Like, you want a shirt with a picture of you on it or something? You can already do that you know."

"No. I want to /be/ a shirt. I want to exist as the piece of clothing. That piece of clothing should be a shirt. I get off on the idea of being a shirt. It has been a dream of mine and we're here for dreams, right?"

Having just spend a non-trivial amount of time lovingly crafting a new type of genitals, with all sorts of bits and bobs and extras, the last thing you want to hear is that your creation is not appreciated. Building something like this that does everything it's supposed to AND communicates across multiple dimensions is not easy, and yet, according to this critic, it has completely missed the mark.

"Why do you want to be a shirt? How would this be better than having some new genitalia? Look, it even vibrates when you poke it like this!"

"Well, yes. That's very good. It even goes all red and bulgy, a nice touch. But... I don't know. It's just always been a thing I've wanted to be. I would much rather fulfill my needs via being a shirt, than to graft on some new body part I'm not even sure I'd be in to."

"And you want people to wear you?"

"That'd be the idea, yes."

Damnit. Damn. It. Everyone was supposed to want one of these new body parts, what with the sounds and the arousals and the thrustings and the juices. Sure the inter-dimensional communication part would be a tough sell due to the learning curve, but once everyone caught on, it'd be a new paradise.

That was the plan, and it'd be awesome, and popular, and there would be much rejoicing. Yet, here we are.

"But you can't be a shirt."

"Why can't I be a shirt?"

"Because that would violate laws. A lot of laws."

"What? It's not illegal to be a shirt anywhere that I know of."

"Not like, legal laws. Physical laws. Laws of existence."

"But don't you control those kind of laws? Or don't some of the others like you have that power?"

DAMN. IT. Note to self: never create worlds that can contain anything capable of making a good point.

"I support we kind of do? But if I change those laws for you, I have to change them for everyone, and I don't think everyone wants to be a shirt. Or pants. Or a shoe. Much less to derive gratification from being any of those."

"Why wouldn't other people want to be shirts? There's so many possibilities. I would be a continual soft hug. I would adorn the wearer and make them look nice. I would absorb their sweat."

"We didn't give you sweat glands. How would you even pull that off?"

"I'd find a way. We've got our own tools down here too, you know. They're just not powerful enough to let me be a shirt."

"Yeah there's a reason for that. What about if you tried to... Ugh, is there even a verb for this? What if you tried to... shirt someone and they didn't know you were a living shirt or whatever it is you're asking for here. Think about the security issues."

"I think it'd be pretty obvious 'cause I'd be talking."

"Oh so you want to be a TALKING shirt? Anything else on this list of demands?"

"Ability to change cloth type? I'd want to stay current with the trends."

"Forget I asked. And besides, not everyon... everyshirt would talk. We already have to deal with enough chaos around here without adding 'Non-consensual shirtings' to our list."

"Hey, you're the one building this world. You wanted feedback on how to do that, and I'm giving it to you."

"You are the worst focus group."

"You randomly asked the first person you saw. Blame fate, not me."

A quiet voice pops up from a few yards, or miles, over. Scale is difficult when you're looking down from above.

"If they get to be a shirt can I be a cube?"

Fuck.

** Why Do I Need You To Tell Me Where My Butt Is
** C'est n'est pas une Buttplug
* Buttplug Ethics
** Wait This Doesn't Sound Technical
** There is No Such Thing As Ethical Buttplugging Under Open Source
** You Must Be This Tall To Code In This Library
* Ok So Here's How You Could Actually Use Buttplug
** Thermonuclear War
** Maybe You Would You Like to Play a Nice Game of Chess?
** Thermonuclear War
* Architecture
:PROPERTIES:
:EXPORT_FILE_NAME: architecture.md
:END:
** Kyle Stop Trying To Be Stunt Rock And Just Write a Fucking Section Name
** Implementation Types

The Buttplug Standard can be implemented in different ways. This
section covers the terms used throughout this document.

** Libraries

Implementing the standard as a library for a certain programming
language allows developers to either build servers on top of the
library in that language, or to integrate the library into their
applications that also use that language (or FFI/bindings to that
language). For instance, the C# implementation of the Buttplug
Standard can be used with a WebSocket implementation on top of it to
be a server that other applications can talk to. It could also be
compiled into a Unity game so that the communication exists only in
the executable itself.

** Servers

As mentioned above, servers are a thin layer on top of a library that
allow other applications to access hardware managed by the server. For
instance, a Web Application may not have the capability to talk to
hardware by itself, but can connect with a Buttplug Server
implementation via HTTP, WebSockets, or other standardized protocols.
Programs like Max/MSP and Pd could communicate with a Buttplug Server
implementation via OSC.

** Applications (aka Clients)

Applications, or clients, refer to programs that in some way interact
with a server to perform some sort of job for the user. A few ideas
for applications:

- A movie player that sends synchronization commands while playing an
  encoded video.
- A music player that syncs sex toys with the BPM of the current
  track.
- A video game that somehow involves sex toy interaction

All of these would need to talk to a Buttplug server to establish
which devices to use, then communicate with those devices.


* Usage Examples
:PROPERTIES:
:EXPORT_FILE_NAME: usages.md
:END:
*** Usage Examples

To concretize this otherwise theoretical discussion, here are some
in-depth examples of how Buttplug implementations could be architected
in the wild.

**** Library Embedded in a Video Game

First off, a simple example using a single program with an embedded
library.

A developer would like to ship a game on Windows, using the Unity
Engine, that has some sort of interaction with sex toys. Since we want
concrete examples here, let's say it's a version of Tetris that
increases vibrator speeds based on how many lines have been made by
the player.

Due to the nature of games, the developer would want it to have as
little impact on performance as possible. They would also want the
server to exist in the game executable, so that it can be shipped as a
single package.

In this case, the developer could use a Buttplug library
implementation, possibly the C# reference library since this is Unity.
Inside the game, device connection configuration could be part of the
game settings menus, allow devices to be automatically reconnected on
game startup. To communicate with the embedded server during gameplay,
C# message objects could be sent to a thread for handling, so that IO
timing doesn't lag the game loop.

One of the important things lost by direct library integration is the
ability to support new hardware. If a game is simple sending a generic
"Vibrate" command, it is basically future-proofed for all toys that
will support that command in the future, assuming it has a way to send
that message to something that supports the new hardware. If a library
is compiled into the game, there would be no way to add this hardware
support though. There are multiple solutions to this issue, but those
are outside the scope of this example.

**** Web Based Hardware Synced Movie Player

Now, a far more difficult scenario. This example tries to build a
shotgun to hit as many platforms as possible with as little code as
possible.

The goal is to build a web based movie player, that will load movies
with synchronization files, and play them back while controlling
hardware. We will assume we are working with browsers that give us a
minimum of HTML5 Video playback and WebSockets. We want our
application to work on as many platforms as possible. The movie player
should be capable of talking to as many devices as possible on as many
platforms as possible, including desktop and mobile. The main focus
for toy support will be Bluetooth LE toys, with all others considered
nice to have.

At this point, we have to take operating system and browser
capabilities into account.

Operating Systems that have BLE:

- Windows 10 (Version 15063 and later)
- macOS (10.6 or later)
- Linux (with Bluez 5.22 or later)
- Android (version 5 or later)
- iOS (LE support versions unknown)
- ChromeOS (LE support versions unknown)

Web Browsers with WebBluetooth:

- Chrome 56 on Mac, Linux, Android, ChromeOS

This means that if we implement a Buttplug Server in Javascript using
WebBluetooth to access BLE devices, we can target the Chrome web
browser and support 2 major desktop platforms, 1 mobile platform, and
whatever ChromeOS is. We can also ship this server implementation as
part of the movie player application, meaning it will all work as a
unit, similar to the game example above. Future-proofing could
feasibly happen with CDN hosting of the library via semantic
versioning adherence.

Unfortunately, that leaves out Windows and iOS. To maximize ROI on
custom support implementation, we're more likely to see more users via
Windows than iOS, so we'll concentrate on Windows first.

To talk to Bluetooth LE on Windows 10 requires access to UWP APIs, so
following a "When In Rome" philosophy, we can implement a Buttplug
Library in C#. On top of this we can build a server exposed via
WebSockets, to let the browser application talk to the native server.
A native implementation gives us the extra win of USB and Serial, at
least, until WebUSB sex toys become a thing.

Going back to the web application itself, this now means the client
side will need to connect to one of two different styles of servers.
We can use User Agent Detection in the browser to let us know which OS
we're on, and then either select the WebBluetooth path or native
Windows Websocket path.

To hit iOS, we now have the option of going via a Xamarin based C#
app, or a Node.js/Cordova app. There will be some custom
implementation on either side, but most of the heavy lifting will have
been done before this.

An aside for those wondering why this wasn't all done in Node.js. At
the time of this writing, node.js bindings to UWP APIs do exist, but
were still iffy at best. Not only that, distributing a native
application like the Buttplug Server would've required wrapping in
something like nw.js, massively inflating distributable size.
Implementing a C# version of the Buttplug Library also gives us a
platform into Unity integration.
